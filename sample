Hereâ€™s the revised and corrected version of your message:

Hi [Manager's Name],

I hope you're doing well. During yesterday's meeting, Alex suggested using a server-rendered HTMX library instead. He raised concerns about SPA (Single Page Application) architecture, such as the need for offline capabilities (which are not in our current scope), duplicate validations on both the frontend and backend, and his opinion that SPA technology is outdated.

I have been doing web development for quite some time now, and I have worked with ASP.Net Web Forms and server-rendered pages using Java and classic ASP. I understand the evolution of web technologies and have seen firsthand the challenges of server-rendered technologies, such as server session issues, memory bottlenecks, and performance problems related to scalability. The advent of ASP.Net MVC improved these areas, offering a cleaner separation of concerns and better capabilities than Web Forms.

Over the past decade, the industry has shifted towards SPA-based web applications for several reasons: scalability, improved user experience, reduced latency, rich interactivity, cost efficiency, and modern development practices.

The industry has moved from creating procedural web applications like classic ASP to dynamic web applications, to MVC-based web applications, and now to SPA-based web applications. Reverting to a server-rendered HTMX-style application makes me concerned that we may end up facing the same old problems.

Additionally, since HTMX doesn't consume REST APIs but instead generates the DOM on the server side, this could have a significant impact on our development effort, considering the size of our application.

For a web application like AgilLink, I believe the following approach would be most effective:

Adopt Angular, React, or Vue.js for the frontend to create a SPA.
Continue with .Net Core for the backend, aligning with our team's expertise in C#. .Net Core has significantly evolved from what we experienced 20 years ago.
In my humble opinion, doing the following will help us achieve our goals:

Architect the UI code in a well-structured manner.
Simplify the architecture and adhere to S.O.L.I.D principles.
Use Dapper/EF Core & ADO.NET for data access.
Offload bulk upload/data processing tasks to function apps/services instead of the web UI.
This approach will significantly impact the application's performance and maintainability. Additionally, choosing a popular UI framework will ease future development and support efforts.

Although I have resigned from my position and am currently serving my notice period, I felt compelled to share my perspective on this matter. I believe it is important for the team to consider these points for the long-term success of the project. You have a broader knowledge than I do, and I'm sure you will think through all these cases; however, I wanted to share my thoughts after that meeting. Thank you.

Best regards,

[Your Name]

Feel free to make any additional adjustments as needed!
